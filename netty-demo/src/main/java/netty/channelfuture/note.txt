1. Netty中的I/O操作是异步的，包括bind，write和connect等操作会简单的返回一个ChannelFuture
2. 调用者并不能立即获得结果，而是通过Future-Listener机制，用户可以方便的主动获取或者通过通知机制获取IO操作结果。
3. Netty的异步模型是建立在future好callback之上的。。
Future的核心思想是假设计算fun是非常耗时的，等待fun返回显然不适合。那么可以在调用fun的时候，立马返回一个Future，
后续可以通过Future取监控fun的处理过程。

Future
    表示异步的执行结果，可以通过它提供的方法来检测执行是否完成。
ChannelFuture是一个接口，我们可以添加监听器，当监听事件发生时，收到通知。

1、在使用Netty编程时，拦截操作和转换出入站数据只需要提供callback或利用future即可。这使得链式操作简单、高效并有利于编写可重用、通用的代码。
2、Netty框架的目标就是让你的业务逻辑从网络基础应用编码中分离出来。

Future-Listener机制
1、当Future对象刚刚创建时，处于非完成状态，调用者可以通过返回ChannelFuture来获取操作执行的状态。
    注册监听函数来执行完成后的操作。
2、常见操作
    isDone
    isSuccess
    getCause 失败原因
    isCancelled 是否被取消
    addListener 注册监听器。

例子：netty.taskqueue.NettyServer bind事假注册监听器